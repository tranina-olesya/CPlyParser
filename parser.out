Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> <empty>
Rule 2     translation_unit -> external_declaration
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     external_declaration -> semicolons
Rule 5     external_declaration -> vars_declaration semicolons
Rule 6     external_declaration -> function_definition
Rule 7     statement_list -> <empty>
Rule 8     statement_list -> statement_list statement
Rule 9     statement -> simple_statement
Rule 10    statement -> block
Rule 11    statement -> selection_statement
Rule 12    statement -> iteration_statement
Rule 13    statement -> jump_statement
Rule 14    simple_statement -> semicolons
Rule 15    simple_statement -> expression semicolons
Rule 16    block -> LBRACE statement_list RBRACE
Rule 17    selection_statement -> if
Rule 18    jump_statement -> return
Rule 19    jump_statement -> continue
Rule 20    jump_statement -> break
Rule 21    return -> RETURN
Rule 22    return -> RETURN logical_expression
Rule 23    continue -> CONTINUE
Rule 24    break -> BREAK
Rule 25    iteration_statement -> for
Rule 26    iteration_statement -> while
Rule 27    iteration_statement -> dowhile
Rule 28    expression -> logical_expression
Rule 29    expression -> assignment
Rule 30    expression -> vars_declaration
Rule 31    expression_list -> <empty>
Rule 32    expression_list -> expression
Rule 33    expression_list -> expression_list COMMA expression
Rule 34    logical_expression -> logical_or_expression
Rule 35    logical_or_expression -> logical_and_expression
Rule 36    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 37    logical_and_expression -> equality_expression
Rule 38    logical_and_expression -> logical_and_expression AND equality_expression
Rule 39    equality_expression -> relational_expression
Rule 40    equality_expression -> equality_expression EQUALS relational_expression
Rule 41    equality_expression -> equality_expression NOTEQUALS relational_expression
Rule 42    relational_expression -> additive_expression
Rule 43    relational_expression -> relational_expression GT additive_expression
Rule 44    relational_expression -> relational_expression LT additive_expression
Rule 45    relational_expression -> relational_expression GE additive_expression
Rule 46    relational_expression -> relational_expression LE additive_expression
Rule 47    additive_expression -> multiplicative_expression
Rule 48    additive_expression -> additive_expression ADD multiplicative_expression
Rule 49    additive_expression -> additive_expression SUB multiplicative_expression
Rule 50    multiplicative_expression -> unary_expression
Rule 51    multiplicative_expression -> multiplicative_expression MUL unary_expression
Rule 52    multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 53    multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 54    unary_expression -> postfix_expression
Rule 55    unary_expression -> NOT group
Rule 56    unary_expression -> SUB group
Rule 57    unary_expression -> ADD group
Rule 58    postfix_expression -> group
Rule 59    postfix_expression -> lvalue INC_OP
Rule 60    postfix_expression -> lvalue DEC_OP
Rule 61    group -> call
Rule 62    group -> lvalue
Rule 63    group -> LPAREN logical_expression RPAREN
Rule 64    group -> number
Rule 65    group -> string
Rule 66    group -> bool_value
Rule 67    if -> IF LPAREN logical_expression RPAREN statement
Rule 68    if -> IF LPAREN logical_expression RPAREN statement ELSE statement
Rule 69    assignment -> lvalue assignment_operation rvalue
Rule 70    rvalue -> logical_expression
Rule 71    rvalue -> array_value
Rule 72    rvalue -> lvalue assignment_operation rvalue
Rule 73    assignment_operation -> ASSIGN
Rule 74    assignment_operation -> ADD_ASSIGN
Rule 75    assignment_operation -> SUB_ASSIGN
Rule 76    assignment_operation -> MUL_ASSIGN
Rule 77    assignment_operation -> DIV_ASSIGN
Rule 78    assignment_operation -> MOD_ASSIGN
Rule 79    simple_rvalue -> logical_expression
Rule 80    simple_rvalue -> lvalue ASSIGN simple_rvalue
Rule 81    string -> STRING
Rule 82    call -> ident LPAREN args_list RPAREN
Rule 83    function_definition -> type ident LPAREN arguments_declaration_list RPAREN block
Rule 84    arguments_declaration_list -> <empty>
Rule 85    arguments_declaration_list -> argument_declaration
Rule 86    arguments_declaration_list -> arguments_declaration_list COMMA argument_declaration
Rule 87    argument_declaration -> type ident
Rule 88    args_list -> <empty>
Rule 89    args_list -> logical_expression
Rule 90    args_list -> args_list COMMA logical_expression
Rule 91    vars_declaration -> type init_declarator_list
Rule 92    vars_declaration -> type_array init_array_declarator_list
Rule 93    ident -> IDENT
Rule 94    type -> IDENT
Rule 95    init_declarator_list -> init_declarator
Rule 96    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 97    init_array_declarator_list -> init_array_declarator
Rule 98    init_array_declarator_list -> init_array_declarator_list COMMA init_array_declarator
Rule 99    init_declarator -> ident
Rule 100   init_declarator -> ident_initializer
Rule 101   init_array_declarator -> array_ident
Rule 102   init_array_declarator -> array_initializer
Rule 103   ident_initializer -> ident ASSIGN simple_rvalue
Rule 104   array_initializer -> ident ASSIGN array_value
Rule 105   array_value -> NEW IDENT LBRACKET logical_expression RBRACKET
Rule 106   array_value -> NEW IDENT BRACKETS LBRACE args_list RBRACE
Rule 107   array_value -> NEW IDENT LBRACKET logical_expression RBRACKET LBRACE args_list RBRACE
Rule 108   array_ident -> ident
Rule 109   lvalue -> ident
Rule 110   lvalue -> get_element
Rule 111   get_element -> ident LBRACKET logical_expression RBRACKET
Rule 112   for -> FOR LPAREN expression_list SEMICOLON for_condition SEMICOLON expression_list RPAREN statement
Rule 113   for_condition -> <empty>
Rule 114   for_condition -> logical_expression
Rule 115   dowhile -> DO statement WHILE LPAREN logical_expression RPAREN semicolons
Rule 116   while -> WHILE LPAREN logical_expression RPAREN statement
Rule 117   bool_value -> TRUE
Rule 118   bool_value -> FALSE
Rule 119   number -> NUMBER
Rule 120   semicolons -> SEMICOLON
Rule 121   semicolons -> semicolons SEMICOLON

Terminals, with rules where they appear

ADD                  : 48 57
ADD_ASSIGN           : 74
AND                  : 38
ASSIGN               : 73 80 103 104
BRACKETS             : 106
BREAK                : 24
COMMA                : 33 86 90 96 98
CONTINUE             : 23
DEC_OP               : 60
DIV                  : 52
DIV_ASSIGN           : 77
DO                   : 115
ELSE                 : 68
EQUALS               : 40
FALSE                : 118
FOR                  : 112
GE                   : 45
GT                   : 43
IDENT                : 93 94 105 106 107
IF                   : 67 68
INC_OP               : 59
LBRACE               : 16 106 107
LBRACKET             : 105 107 111
LE                   : 46
LPAREN               : 63 67 68 82 83 112 115 116
LT                   : 44
MOD                  : 53
MOD_ASSIGN           : 78
MUL                  : 51
MUL_ASSIGN           : 76
NEW                  : 105 106 107
NOT                  : 55
NOTEQUALS            : 41
NUMBER               : 119
OR                   : 36
RBRACE               : 16 106 107
RBRACKET             : 105 107 111
RETURN               : 21 22
RPAREN               : 63 67 68 82 83 112 115 116
SEMICOLON            : 112 112 120 121
STRING               : 81
SUB                  : 49 56
SUB_ASSIGN           : 75
TRUE                 : 117
WHILE                : 115 116
error                : 

Nonterminals, with rules where they appear

additive_expression  : 42 43 44 45 46 48 49
args_list            : 82 90 106 107
argument_declaration : 85 86
arguments_declaration_list : 83 86
array_ident          : 101
array_initializer    : 102
array_value          : 71 104
assignment           : 29
assignment_operation : 69 72
block                : 10 83
bool_value           : 66
break                : 20
call                 : 61
continue             : 19
dowhile              : 27
equality_expression  : 37 38 40 41
expression           : 15 32 33
expression_list      : 33 112 112
external_declaration : 2 3
for                  : 25
for_condition        : 112
function_definition  : 6
get_element          : 110
group                : 55 56 57 58
ident                : 82 83 87 99 103 104 108 109 111
ident_initializer    : 100
if                   : 17
init_array_declarator : 97 98
init_array_declarator_list : 92 98
init_declarator      : 95 96
init_declarator_list : 91 96
iteration_statement  : 12
jump_statement       : 13
logical_and_expression : 35 36 38
logical_expression   : 22 28 63 67 68 70 79 89 90 105 107 111 114 115 116
logical_or_expression : 34 36
lvalue               : 59 60 62 69 72 80
multiplicative_expression : 47 48 49 51 52 53
number               : 64
postfix_expression   : 54
relational_expression : 39 40 41 43 44 45 46
return               : 18
rvalue               : 69 72
selection_statement  : 11
semicolons           : 4 5 14 15 115 121
simple_rvalue        : 80 103
simple_statement     : 9
statement            : 8 67 68 68 112 115 116
statement_list       : 8 16
string               : 65
translation_unit     : 3 0
type                 : 83 87 91
type_array           : 92
unary_expression     : 50 51 52 53
vars_declaration     : 5 30
while                : 26

