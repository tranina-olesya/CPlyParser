
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADD_ASSIGN AND ASSIGN BRACKETS BREAK CHAR COMMA CONTINUE DEC_OP DIV DIV_ASSIGN DO ELSE EQUALS FALSE FOR GE GT IDENT IF INC_OP LBRACE LBRACKET LE LPAREN LT MOD MOD_ASSIGN MUL MUL_ASSIGN NEW NOT NOTEQUALS NUMBER OR RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING SUB SUB_ASSIGN TRUE WHILEtranslation_unit :\n                        | external_declaration\n                        | translation_unit external_declarationexternal_declaration : semicolons\n                            | vars_declaration semicolons\n                            | function_definitionstatement_list :\n                      | statement_list statementstatement : simple_statement\n                 | block\n                 | selection_statement\n                 | iteration_statement\n                 | jump_statement semicolonssimple_statement : semicolons\n                        | expression semicolonsblock : LBRACE statement_list RBRACEselection_statement : ifjump_statement : return\n                      | continue\n                      | breakreturn : RETURN\n              | RETURN logical_expression\n              | RETURN assignmentcontinue : CONTINUEbreak : BREAKiteration_statement : for\n                           | while\n                           | dowhileexpression : logical_expression\n                  | assignment\n                  | vars_declarationexpression_list :\n                       | expression\n                       | expression_list COMMA expressionlogical_expression : logical_or_expressionlogical_or_expression : logical_and_expression\n                             | logical_or_expression OR logical_and_expressionlogical_and_expression : equality_expression\n                              | logical_and_expression AND equality_expressionequality_expression : relational_expression\n                           | equality_expression EQUALS relational_expression\n                           | equality_expression NOTEQUALS relational_expression relational_expression : additive_expression\n                             | relational_expression GT additive_expression\n                             | relational_expression LT additive_expression\n                             | relational_expression GE additive_expression\n                             | relational_expression LE additive_expressionadditive_expression : multiplicative_expression\n                           | additive_expression ADD multiplicative_expression\n                           | additive_expression SUB multiplicative_expressionmultiplicative_expression : unary_expression\n                                 | multiplicative_expression MUL unary_expression\n                                 | multiplicative_expression DIV unary_expression\n                                 | multiplicative_expression MOD unary_expressionunary_expression : postfix_expression\n                        | NOT group\n                        | SUB group\n                        | ADD grouppostfix_expression : group\n                          | lvalue INC_OP\n                          | lvalue DEC_OPgroup : call\n             | lvalue\n             | LPAREN logical_expression RPAREN\n             | number\n             | string\n             | char\n             | bool_valueif : IF LPAREN logical_expression RPAREN statement\n          | IF LPAREN logical_expression RPAREN statement ELSE statementassignment : lvalue assignment_operation rvaluervalue : logical_expression\n              | array_value\n              | lvalue assignment_operation rvalueassignment_operation : ASSIGN\n                            | ADD_ASSIGN\n                            | SUB_ASSIGN\n                            | MUL_ASSIGN\n                            | DIV_ASSIGN\n                            | MOD_ASSIGNsimple_rvalue : logical_expression\n                     | lvalue ASSIGN simple_rvaluestring : STRINGchar : CHARcall : ident LPAREN args_list RPARENfunction_definition : type ident LPAREN arguments_declaration_list RPAREN blockarguments_declaration_list :\n                                  | argument_declaration\n                                  | arguments_declaration_list COMMA argument_declarationargument_declaration : type identargs_list :\n                 | logical_expression\n                 | args_list COMMA logical_expressionvars_declaration : type init_declarator_list\n                        | type_array init_array_declarator_listident : IDENTtype : IDENTtype_array : IDENT BRACKETSinit_declarator_list : init_declarator\n                            | init_declarator_list COMMA init_declaratorinit_array_declarator_list : init_array_declarator\n                                  | init_array_declarator_list COMMA init_array_declaratorinit_declarator : ident\n                       | ident_initializerinit_array_declarator : array_ident\n                             | array_initializerident_initializer : ident ASSIGN simple_rvaluearray_initializer : ident ASSIGN array_valuearray_value : NEW type LBRACKET logical_expression RBRACKET\n                   | NEW type BRACKETS LBRACE args_list RBRACE\n                   | NEW type LBRACKET logical_expression RBRACKET LBRACE args_list RBRACEarray_ident : identlvalue : ident\n              | get_elementget_element : ident LBRACKET logical_expression RBRACKETfor : FOR LPAREN expression_list SEMICOLON for_condition SEMICOLON expression_list RPAREN statementfor_condition :\n                     | logical_expressiondowhile : DO statement WHILE LPAREN logical_expression RPAREN semicolonswhile : WHILE LPAREN logical_expression RPAREN statementbool_value : TRUE\n                  | FALSEnumber : NUMBERsemicolons : SEMICOLON\n                  | semicolons SEMICOLON'
    
_lr_action_items = {'SEMICOLON':([0,1,2,3,4,5,6,10,11,12,13,14,15,16,17,18,19,20,21,22,29,30,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,63,64,72,73,87,88,89,90,91,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,150,151,153,155,157,158,160,163,164,173,175,176,179,180,181,182,184,185,187,190,191,192,193,194,195,197,198,200,201,203,204,205,],[6,6,-2,11,6,-6,-124,-3,-125,11,-94,-103,-99,-96,-104,-95,-101,-105,-106,-112,-100,-103,-113,-107,-81,-63,-35,-114,-36,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-102,-108,-60,-61,-58,-63,-113,-57,-56,-63,-113,-86,-7,-82,-37,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,6,-115,-85,-16,-8,-9,-10,-11,-12,6,11,6,-17,-26,-27,-28,-18,-19,-20,-29,-30,-31,6,-21,-24,-25,-63,-96,-109,11,11,-32,-22,-23,-110,185,-33,-63,-71,-72,-73,6,-117,6,-111,-69,199,-118,-34,-120,-74,6,6,-70,11,6,-116,]),'IDENT':([0,1,2,3,5,6,7,8,9,10,11,12,23,24,25,26,27,31,34,46,47,50,53,65,68,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,96,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,152,153,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[9,9,-2,-4,-6,-124,16,16,-97,-3,-125,-5,-98,16,34,16,16,16,-97,16,16,16,16,34,34,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-86,-7,16,153,16,16,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,153,16,16,-97,-13,-15,16,153,16,16,-75,-76,-77,-78,-79,-80,16,153,16,153,153,16,16,-69,-120,153,153,-70,-119,153,-116,]),'$end':([0,1,2,3,5,6,10,11,12,96,125,],[-1,0,-2,-4,-6,-124,-3,-125,-5,-86,-16,]),'RBRACE':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,97,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,124,125,126,127,128,129,130,132,134,135,136,137,154,156,157,158,172,183,191,195,201,203,205,],[-124,-125,-96,-35,-114,-36,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,-7,-92,-37,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,125,-115,-85,-91,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,-93,173,-13,-15,-91,190,-69,-120,-70,-119,-116,]),'LBRACE':([6,11,67,97,118,119,125,126,127,128,129,130,132,134,135,136,137,147,155,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,97,-7,124,97,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,97,172,-13,-15,97,97,-69,-120,97,-70,-119,97,-116,]),'IF':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,144,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,144,-13,-15,144,144,-69,-120,144,-70,-119,144,-116,]),'FOR':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,145,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,145,-13,-15,145,145,-69,-120,145,-70,-119,145,-116,]),'WHILE':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,162,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,146,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,146,-13,-15,178,146,146,-69,-120,146,-70,-119,146,-116,]),'DO':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,147,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,147,-13,-15,147,147,-69,-120,147,-70,-119,147,-116,]),'RETURN':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,148,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,148,-13,-15,148,148,-69,-120,148,-70,-119,148,-116,]),'CONTINUE':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,149,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,149,-13,-15,149,149,-69,-120,149,-70,-119,149,-116,]),'BREAK':([6,11,97,119,125,126,127,128,129,130,132,134,135,136,137,147,157,158,184,187,191,195,198,201,203,204,205,],[-124,-125,-7,150,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,150,-13,-15,150,150,-69,-120,150,-70,-119,150,-116,]),'NOT':([6,11,26,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-7,50,50,50,50,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,50,50,-13,-15,50,50,50,50,-75,-76,-77,-78,-79,-80,50,50,50,50,50,50,50,-69,-120,50,50,-70,-119,50,-116,]),'SUB':([6,11,16,26,35,38,40,44,45,48,49,51,52,53,54,55,56,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,97,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,151,153,157,158,159,160,161,165,166,167,168,169,170,171,172,179,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,-96,47,-113,-63,-114,83,-48,-51,-55,-59,-62,47,-65,-66,-67,-68,-123,-83,-84,-121,-122,47,47,47,-60,-61,47,47,47,47,47,47,47,47,47,47,47,47,47,-58,-63,-113,-57,-56,-63,-113,-7,83,83,83,83,-49,-50,-52,-53,-54,-64,47,47,-115,-85,47,47,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,47,47,-63,-96,-13,-15,47,47,47,47,-75,-76,-77,-78,-79,-80,47,-63,47,47,47,47,47,47,-69,-120,47,47,-70,-119,47,-116,]),'ADD':([6,11,16,26,35,38,40,44,45,48,49,51,52,53,54,55,56,57,58,59,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,94,97,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,151,153,157,158,159,160,161,165,166,167,168,169,170,171,172,179,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,-96,46,-113,-63,-114,82,-48,-51,-55,-59,-62,46,-65,-66,-67,-68,-123,-83,-84,-121,-122,46,46,46,-60,-61,46,46,46,46,46,46,46,46,46,46,46,46,46,-58,-63,-113,-57,-56,-63,-113,-7,82,82,82,82,-49,-50,-52,-53,-54,-64,46,46,-115,-85,46,46,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,46,46,-63,-96,-13,-15,46,46,46,46,-75,-76,-77,-78,-79,-80,46,-63,46,46,46,46,46,46,-69,-120,46,46,-70,-119,46,-116,]),'LPAREN':([6,11,14,16,26,35,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,89,94,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,144,145,146,147,148,153,157,158,159,160,161,165,166,167,168,169,170,171,172,178,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,25,-96,53,70,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,70,70,-7,53,53,53,53,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,159,160,161,53,53,-96,-13,-15,53,53,53,53,-75,-76,-77,-78,-79,-80,53,188,53,53,53,53,53,53,-69,-120,53,53,-70,-119,53,-116,]),'NUMBER':([6,11,26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-7,58,58,58,58,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,58,58,-13,-15,58,58,58,58,-75,-76,-77,-78,-79,-80,58,58,58,58,58,58,58,-69,-120,58,58,-70,-119,58,-116,]),'STRING':([6,11,26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-7,59,59,59,59,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,59,59,-13,-15,59,59,59,59,-75,-76,-77,-78,-79,-80,59,59,59,59,59,59,59,-69,-120,59,59,-70,-119,59,-116,]),'CHAR':([6,11,26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-7,60,60,60,60,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,60,60,-13,-15,60,60,60,60,-75,-76,-77,-78,-79,-80,60,60,60,60,60,60,60,-69,-120,60,60,-70,-119,60,-116,]),'TRUE':([6,11,26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-7,61,61,61,61,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,61,61,-13,-15,61,61,61,61,-75,-76,-77,-78,-79,-80,61,61,61,61,61,61,61,-69,-120,61,61,-70,-119,61,-116,]),'FALSE':([6,11,26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,97,117,119,122,124,125,126,127,128,129,130,132,134,135,136,137,147,148,157,158,159,160,161,165,166,167,168,169,170,171,172,184,185,186,187,188,189,191,195,198,199,201,203,204,205,],[-124,-125,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-7,62,62,62,62,-16,-8,-9,-10,-11,-12,-14,-17,-26,-27,-28,62,62,-13,-15,62,62,62,62,-75,-76,-77,-78,-79,-80,62,62,62,62,62,62,62,-69,-120,62,62,-70,-119,62,-116,]),'ELSE':([6,11,125,127,128,129,130,132,134,135,136,137,157,158,191,195,201,203,205,],[-124,-125,-16,-9,-10,-11,-12,-14,-17,-26,-27,-28,-13,-15,198,-120,-70,-119,-116,]),'BRACKETS':([9,34,95,153,],[23,-97,118,23,]),'COMMA':([13,14,15,16,17,18,19,20,21,22,25,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,63,64,66,70,72,73,87,88,89,90,91,93,94,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,124,141,142,143,151,153,154,155,156,160,172,173,175,176,179,180,181,182,183,190,194,197,199,202,],[24,-103,-99,-96,-104,27,-101,-105,-106,-112,-87,-100,-103,68,-88,-113,-107,-81,-63,-35,-114,-36,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-102,-108,-90,-91,-60,-61,-58,-63,-113,-57,-56,-63,-113,-89,122,-92,-82,-37,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-91,-29,-30,-31,-63,-96,-93,-109,122,-32,-91,-110,186,-33,-63,-71,-72,-73,122,-111,-34,-74,-32,186,]),'RPAREN':([13,15,16,17,18,19,20,21,22,25,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,63,64,66,70,72,73,87,88,89,90,91,92,93,94,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,141,142,143,151,153,154,155,173,174,176,177,179,180,181,182,190,194,196,197,199,202,],[-94,-99,-96,-104,-95,-101,-105,-106,-112,-87,-100,-103,67,-88,-113,-107,-81,-63,-35,-114,-36,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-102,-108,-90,-91,-60,-61,-58,-63,-113,-57,-56,116,-63,-113,-89,121,-92,-82,-37,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-29,-30,-31,-63,-96,-93,-109,-110,184,-33,187,-63,-71,-72,-73,-111,-34,200,-74,-32,204,]),'ASSIGN':([14,16,22,30,35,38,40,120,151,153,179,],[26,-96,28,26,-113,71,-114,-115,166,-96,166,]),'LBRACKET':([16,34,35,89,94,95,153,],[-96,-97,69,69,69,117,-96,]),'INC_OP':([16,35,38,40,93,94,120,151,153,179,],[-96,-113,72,-114,72,-113,-115,72,-96,72,]),'DEC_OP':([16,35,38,40,93,94,120,151,153,179,],[-96,-113,73,-114,73,-113,-115,73,-96,73,]),'MUL':([16,35,38,40,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,84,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,84,84,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'DIV':([16,35,38,40,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,85,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,85,85,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'MOD':([16,35,38,40,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,86,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,86,86,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'GT':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,78,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,78,78,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'LT':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,79,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,79,79,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'GE':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,80,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,80,80,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'LE':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,81,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,81,81,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'EQUALS':([16,35,38,40,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,76,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,76,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'NOTEQUALS':([16,35,38,40,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,77,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,77,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'AND':([16,35,38,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,-114,75,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,75,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'OR':([16,35,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,151,153,179,],[-96,-113,-63,74,-114,-36,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,-37,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,-63,-96,-63,]),'RBRACKET':([16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,72,73,87,88,89,90,91,93,94,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,120,121,123,],[-96,-35,-114,-36,-38,-40,-43,-48,-51,-55,-59,-62,-65,-66,-67,-68,-123,-83,-84,-121,-122,-60,-61,-58,-63,-113,-57,-56,-63,-113,120,-37,-39,-41,-42,-44,-45,-46,-47,-49,-50,-52,-53,-54,-64,-115,-85,155,]),'ADD_ASSIGN':([16,35,40,120,151,153,179,],[-96,-113,-114,-115,167,-96,167,]),'SUB_ASSIGN':([16,35,40,120,151,153,179,],[-96,-113,-114,-115,168,-96,168,]),'MUL_ASSIGN':([16,35,40,120,151,153,179,],[-96,-113,-114,-115,169,-96,169,]),'DIV_ASSIGN':([16,35,40,120,151,153,179,],[-96,-113,-114,-115,170,-96,170,]),'MOD_ASSIGN':([16,35,40,120,151,153,179,],[-96,-113,-114,-115,171,-96,171,]),'NEW':([28,165,166,167,168,169,170,171,189,],[65,65,-75,-76,-77,-78,-79,-80,65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,10,]),'semicolons':([0,1,4,119,131,133,147,184,187,198,200,204,],[3,3,12,132,157,158,132,132,132,132,203,132,]),'vars_declaration':([0,1,119,147,160,184,186,187,198,199,204,],[4,4,143,143,143,143,143,143,143,143,143,]),'function_definition':([0,1,],[5,5,]),'type':([0,1,25,65,68,119,147,160,184,186,187,198,199,204,],[7,7,31,95,31,152,152,152,152,152,152,152,152,152,]),'type_array':([0,1,119,147,160,184,186,187,198,199,204,],[8,8,8,8,8,8,8,8,8,8,8,]),'init_declarator_list':([7,152,],[13,13,]),'ident':([7,8,24,26,27,31,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,152,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[14,22,30,35,22,66,89,89,89,94,94,94,35,94,94,94,94,94,94,94,94,94,94,94,94,94,94,35,94,94,35,35,30,94,35,94,35,94,35,94,35,35,94,35,35,35,35,]),'init_declarator':([7,24,152,],[15,29,15,]),'ident_initializer':([7,24,152,],[17,17,17,]),'init_array_declarator_list':([8,],[18,]),'init_array_declarator':([8,27,],[19,63,]),'array_ident':([8,27,],[20,20,]),'array_initializer':([8,27,],[21,21,]),'arguments_declaration_list':([25,],[32,]),'argument_declaration':([25,68,],[33,98,]),'simple_rvalue':([26,71,],[36,102,]),'logical_expression':([26,53,69,70,71,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[37,92,99,101,37,123,141,154,101,141,163,174,141,177,181,101,141,193,141,141,196,181,141,141,141,]),'lvalue':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[38,88,88,88,93,93,93,38,93,93,93,93,93,93,93,93,93,93,93,93,93,93,151,93,93,151,151,93,151,93,179,93,151,93,151,151,93,179,151,151,151,]),'logical_or_expression':([26,53,69,70,71,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'get_element':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'logical_and_expression':([26,53,69,70,71,74,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[41,41,41,41,41,103,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'equality_expression':([26,53,69,70,71,74,75,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[42,42,42,42,42,42,104,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'relational_expression':([26,53,69,70,71,74,75,76,77,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[43,43,43,43,43,43,43,105,106,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'additive_expression':([26,53,69,70,71,74,75,76,77,78,79,80,81,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[44,44,44,44,44,44,44,44,44,107,108,109,110,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'multiplicative_expression':([26,53,69,70,71,74,75,76,77,78,79,80,81,82,83,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[45,45,45,45,45,45,45,45,45,45,45,45,45,111,112,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'unary_expression':([26,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,113,114,115,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'postfix_expression':([26,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'group':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[51,87,90,91,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'call':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'number':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'string':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'char':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'bool_value':([26,46,47,50,53,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,86,117,119,122,124,147,148,159,160,161,165,172,184,185,186,187,188,189,198,199,204,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'array_value':([28,165,189,],[64,182,182,]),'block':([67,119,147,184,187,198,204,],[96,128,128,128,128,128,128,]),'args_list':([70,124,172,],[100,156,183,]),'statement_list':([97,],[119,]),'statement':([119,147,184,187,198,204,],[126,162,191,195,201,205,]),'simple_statement':([119,147,184,187,198,204,],[127,127,127,127,127,127,]),'selection_statement':([119,147,184,187,198,204,],[129,129,129,129,129,129,]),'iteration_statement':([119,147,184,187,198,204,],[130,130,130,130,130,130,]),'jump_statement':([119,147,184,187,198,204,],[131,131,131,131,131,131,]),'expression':([119,147,160,184,186,187,198,199,204,],[133,133,176,133,194,133,133,176,133,]),'if':([119,147,184,187,198,204,],[134,134,134,134,134,134,]),'for':([119,147,184,187,198,204,],[135,135,135,135,135,135,]),'while':([119,147,184,187,198,204,],[136,136,136,136,136,136,]),'dowhile':([119,147,184,187,198,204,],[137,137,137,137,137,137,]),'return':([119,147,184,187,198,204,],[138,138,138,138,138,138,]),'continue':([119,147,184,187,198,204,],[139,139,139,139,139,139,]),'break':([119,147,184,187,198,204,],[140,140,140,140,140,140,]),'assignment':([119,147,148,160,184,186,187,198,199,204,],[142,142,164,142,142,142,142,142,142,142,]),'assignment_operation':([151,179,],[165,189,]),'expression_list':([160,199,],[175,202,]),'rvalue':([165,189,],[180,197,]),'for_condition':([185,],[192,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> <empty>','translation_unit',0,'p_translation_unit','cTreeParser.py',97),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cTreeParser.py',98),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cTreeParser.py',99),
  ('external_declaration -> semicolons','external_declaration',1,'p_external_declaration','cTreeParser.py',111),
  ('external_declaration -> vars_declaration semicolons','external_declaration',2,'p_external_declaration','cTreeParser.py',112),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cTreeParser.py',113),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','cTreeParser.py',118),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cTreeParser.py',119),
  ('statement -> simple_statement','statement',1,'p_statement','cTreeParser.py',129),
  ('statement -> block','statement',1,'p_statement','cTreeParser.py',130),
  ('statement -> selection_statement','statement',1,'p_statement','cTreeParser.py',131),
  ('statement -> iteration_statement','statement',1,'p_statement','cTreeParser.py',132),
  ('statement -> jump_statement semicolons','statement',2,'p_statement','cTreeParser.py',133),
  ('simple_statement -> semicolons','simple_statement',1,'p_simple_statement','cTreeParser.py',138),
  ('simple_statement -> expression semicolons','simple_statement',2,'p_simple_statement','cTreeParser.py',139),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','cTreeParser.py',144),
  ('selection_statement -> if','selection_statement',1,'p_selection_statement','cTreeParser.py',149),
  ('jump_statement -> return','jump_statement',1,'p_jump_statement','cTreeParser.py',154),
  ('jump_statement -> continue','jump_statement',1,'p_jump_statement','cTreeParser.py',155),
  ('jump_statement -> break','jump_statement',1,'p_jump_statement','cTreeParser.py',156),
  ('return -> RETURN','return',1,'p_return','cTreeParser.py',161),
  ('return -> RETURN logical_expression','return',2,'p_return','cTreeParser.py',162),
  ('return -> RETURN assignment','return',2,'p_return','cTreeParser.py',163),
  ('continue -> CONTINUE','continue',1,'p_continue','cTreeParser.py',171),
  ('break -> BREAK','break',1,'p_break','cTreeParser.py',176),
  ('iteration_statement -> for','iteration_statement',1,'p_iteration_statement','cTreeParser.py',181),
  ('iteration_statement -> while','iteration_statement',1,'p_iteration_statement','cTreeParser.py',182),
  ('iteration_statement -> dowhile','iteration_statement',1,'p_iteration_statement','cTreeParser.py',183),
  ('expression -> logical_expression','expression',1,'p_expression','cTreeParser.py',188),
  ('expression -> assignment','expression',1,'p_expression','cTreeParser.py',189),
  ('expression -> vars_declaration','expression',1,'p_expression','cTreeParser.py',190),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list','cTreeParser.py',195),
  ('expression_list -> expression','expression_list',1,'p_expression_list','cTreeParser.py',196),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','cTreeParser.py',197),
  ('logical_expression -> logical_or_expression','logical_expression',1,'p_logical_expression','cTreeParser.py',208),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cTreeParser.py',213),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cTreeParser.py',214),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression','cTreeParser.py',222),
  ('logical_and_expression -> logical_and_expression AND equality_expression','logical_and_expression',3,'p_logical_and_expression','cTreeParser.py',223),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cTreeParser.py',231),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cTreeParser.py',232),
  ('equality_expression -> equality_expression NOTEQUALS relational_expression','equality_expression',3,'p_equality_expression','cTreeParser.py',233),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','cTreeParser.py',241),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',242),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',243),
  ('relational_expression -> relational_expression GE additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',244),
  ('relational_expression -> relational_expression LE additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',245),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cTreeParser.py',253),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cTreeParser.py',254),
  ('additive_expression -> additive_expression SUB multiplicative_expression','additive_expression',3,'p_additive_expression','cTreeParser.py',255),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','cTreeParser.py',263),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','cTreeParser.py',264),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','cTreeParser.py',265),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','cTreeParser.py',266),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cTreeParser.py',274),
  ('unary_expression -> NOT group','unary_expression',2,'p_unary_expression','cTreeParser.py',275),
  ('unary_expression -> SUB group','unary_expression',2,'p_unary_expression','cTreeParser.py',276),
  ('unary_expression -> ADD group','unary_expression',2,'p_unary_expression','cTreeParser.py',277),
  ('postfix_expression -> group','postfix_expression',1,'p_postfix_expression','cTreeParser.py',285),
  ('postfix_expression -> lvalue INC_OP','postfix_expression',2,'p_postfix_expression','cTreeParser.py',286),
  ('postfix_expression -> lvalue DEC_OP','postfix_expression',2,'p_postfix_expression','cTreeParser.py',287),
  ('group -> call','group',1,'p_group','cTreeParser.py',294),
  ('group -> lvalue','group',1,'p_group','cTreeParser.py',295),
  ('group -> LPAREN logical_expression RPAREN','group',3,'p_group','cTreeParser.py',296),
  ('group -> number','group',1,'p_group','cTreeParser.py',297),
  ('group -> string','group',1,'p_group','cTreeParser.py',298),
  ('group -> char','group',1,'p_group','cTreeParser.py',299),
  ('group -> bool_value','group',1,'p_group','cTreeParser.py',300),
  ('if -> IF LPAREN logical_expression RPAREN statement','if',5,'p_if','cTreeParser.py',309),
  ('if -> IF LPAREN logical_expression RPAREN statement ELSE statement','if',7,'p_if','cTreeParser.py',310),
  ('assignment -> lvalue assignment_operation rvalue','assignment',3,'p_assignment','cTreeParser.py',319),
  ('rvalue -> logical_expression','rvalue',1,'p_rvalue','cTreeParser.py',327),
  ('rvalue -> array_value','rvalue',1,'p_rvalue','cTreeParser.py',328),
  ('rvalue -> lvalue assignment_operation rvalue','rvalue',3,'p_rvalue','cTreeParser.py',329),
  ('assignment_operation -> ASSIGN','assignment_operation',1,'p_assignment_operation','cTreeParser.py',340),
  ('assignment_operation -> ADD_ASSIGN','assignment_operation',1,'p_assignment_operation','cTreeParser.py',341),
  ('assignment_operation -> SUB_ASSIGN','assignment_operation',1,'p_assignment_operation','cTreeParser.py',342),
  ('assignment_operation -> MUL_ASSIGN','assignment_operation',1,'p_assignment_operation','cTreeParser.py',343),
  ('assignment_operation -> DIV_ASSIGN','assignment_operation',1,'p_assignment_operation','cTreeParser.py',344),
  ('assignment_operation -> MOD_ASSIGN','assignment_operation',1,'p_assignment_operation','cTreeParser.py',345),
  ('simple_rvalue -> logical_expression','simple_rvalue',1,'p_simple_rvalue','cTreeParser.py',350),
  ('simple_rvalue -> lvalue ASSIGN simple_rvalue','simple_rvalue',3,'p_simple_rvalue','cTreeParser.py',351),
  ('string -> STRING','string',1,'p_string','cTreeParser.py',359),
  ('char -> CHAR','char',1,'p_char','cTreeParser.py',364),
  ('call -> ident LPAREN args_list RPAREN','call',4,'p_call','cTreeParser.py',369),
  ('function_definition -> type ident LPAREN arguments_declaration_list RPAREN block','function_definition',6,'p_function_definition','cTreeParser.py',374),
  ('arguments_declaration_list -> <empty>','arguments_declaration_list',0,'p_arguments_declaration_list','cTreeParser.py',379),
  ('arguments_declaration_list -> argument_declaration','arguments_declaration_list',1,'p_arguments_declaration_list','cTreeParser.py',380),
  ('arguments_declaration_list -> arguments_declaration_list COMMA argument_declaration','arguments_declaration_list',3,'p_arguments_declaration_list','cTreeParser.py',381),
  ('argument_declaration -> type ident','argument_declaration',2,'p_argument_declaration','cTreeParser.py',392),
  ('args_list -> <empty>','args_list',0,'p_args_list','cTreeParser.py',397),
  ('args_list -> logical_expression','args_list',1,'p_args_list','cTreeParser.py',398),
  ('args_list -> args_list COMMA logical_expression','args_list',3,'p_args_list','cTreeParser.py',399),
  ('vars_declaration -> type init_declarator_list','vars_declaration',2,'p_vars_declaration','cTreeParser.py',409),
  ('vars_declaration -> type_array init_array_declarator_list','vars_declaration',2,'p_vars_declaration','cTreeParser.py',410),
  ('ident -> IDENT','ident',1,'p_ident','cTreeParser.py',418),
  ('type -> IDENT','type',1,'p_type','cTreeParser.py',423),
  ('type_array -> IDENT BRACKETS','type_array',2,'p_type_array','cTreeParser.py',428),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cTreeParser.py',433),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cTreeParser.py',434),
  ('init_array_declarator_list -> init_array_declarator','init_array_declarator_list',1,'p_init_array_declarator_list','cTreeParser.py',443),
  ('init_array_declarator_list -> init_array_declarator_list COMMA init_array_declarator','init_array_declarator_list',3,'p_init_array_declarator_list','cTreeParser.py',444),
  ('init_declarator -> ident','init_declarator',1,'p_init_declarator','cTreeParser.py',453),
  ('init_declarator -> ident_initializer','init_declarator',1,'p_init_declarator','cTreeParser.py',454),
  ('init_array_declarator -> array_ident','init_array_declarator',1,'p_init_array_declarator','cTreeParser.py',459),
  ('init_array_declarator -> array_initializer','init_array_declarator',1,'p_init_array_declarator','cTreeParser.py',460),
  ('ident_initializer -> ident ASSIGN simple_rvalue','ident_initializer',3,'p_ident_initializer','cTreeParser.py',465),
  ('array_initializer -> ident ASSIGN array_value','array_initializer',3,'p_array_initializer','cTreeParser.py',470),
  ('array_value -> NEW type LBRACKET logical_expression RBRACKET','array_value',5,'p_array_value','cTreeParser.py',475),
  ('array_value -> NEW type BRACKETS LBRACE args_list RBRACE','array_value',6,'p_array_value','cTreeParser.py',476),
  ('array_value -> NEW type LBRACKET logical_expression RBRACKET LBRACE args_list RBRACE','array_value',8,'p_array_value','cTreeParser.py',477),
  ('array_ident -> ident','array_ident',1,'p_array_ident','cTreeParser.py',488),
  ('lvalue -> ident','lvalue',1,'p_lvalue','cTreeParser.py',493),
  ('lvalue -> get_element','lvalue',1,'p_lvalue','cTreeParser.py',494),
  ('get_element -> ident LBRACKET logical_expression RBRACKET','get_element',4,'p_get_element','cTreeParser.py',499),
  ('for -> FOR LPAREN expression_list SEMICOLON for_condition SEMICOLON expression_list RPAREN statement','for',9,'p_for','cTreeParser.py',504),
  ('for_condition -> <empty>','for_condition',0,'p_for_condition','cTreeParser.py',509),
  ('for_condition -> logical_expression','for_condition',1,'p_for_condition','cTreeParser.py',510),
  ('dowhile -> DO statement WHILE LPAREN logical_expression RPAREN semicolons','dowhile',7,'p_dowhile','cTreeParser.py',516),
  ('while -> WHILE LPAREN logical_expression RPAREN statement','while',5,'p_while','cTreeParser.py',521),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','cTreeParser.py',526),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','cTreeParser.py',527),
  ('number -> NUMBER','number',1,'p_expression_number','cTreeParser.py',532),
  ('semicolons -> SEMICOLON','semicolons',1,'p_semicolons','cTreeParser.py',537),
  ('semicolons -> semicolons SEMICOLON','semicolons',2,'p_semicolons','cTreeParser.py',538),
]
