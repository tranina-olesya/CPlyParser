
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER IDENT STRING ADD SUB MUL DIV MOD INC_OP DEC_OP ASSIGN LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET BRACKETS SEMICOLON COMMA GT LT GE LE EQUALS NOTEQUALS OR AND NOT IF ELSE FOR WHILE DO TRUE FALSE RETURN BREAK CONTINUE NEWtranslation_unit :\n                        | external_declaration\n                        | translation_unit external_declarationexternal_declaration : semicolons\n                            | vars_declaration semicolons\n                            | function_definitionstatement_list :\n                      | statement_list statementstatement : simple_statement\n                 | block\n                 | selection_statement\n                 | iteration_statement\n                 | jump_statementsimple_statement : semicolons\n                        | expression semicolonsblock : LBRACE statement_list RBRACEselection_statement : ifjump_statement : return\n                      | continue\n                      | breakreturn : RETURN\n              | RETURN logical_expressioncontinue : CONTINUEbreak : BREAKiteration_statement : for\n                           | while\n                           | dowhileexpression : logical_expression\n                  | assignment\n                  | vars_declarationexpression_list :\n                       | expression\n                       | expression_list COMMA expressionlogical_expression : logical_or_expressionlogical_or_expression : logical_and_expression\n                             | logical_or_expression OR logical_and_expressionlogical_and_expression : equality_expression\n                              | logical_and_expression AND equality_expressionequality_expression : relational_expression\n                           | equality_expression EQUALS relational_expression\n                           | equality_expression NOTEQUALS relational_expression relational_expression : additive_expression\n                             | relational_expression GT additive_expression\n                             | relational_expression LT additive_expression\n                             | relational_expression GE additive_expression\n                             | relational_expression LE additive_expressionadditive_expression : multiplicative_expression\n                           | additive_expression ADD multiplicative_expression\n                           | additive_expression SUB multiplicative_expressionmultiplicative_expression : unary_expression\n                                 | multiplicative_expression MUL unary_expression\n                                 | multiplicative_expression DIV unary_expression\n                                 | multiplicative_expression MOD unary_expressionunary_expression : postfix_expression\n                        | NOT group\n                        | SUB group\n                        | ADD grouppostfix_expression : group\n                          | lvalue INC_OP\n                          | lvalue DEC_OPgroup : call\n             | lvalue\n             | LPAREN logical_expression RPAREN\n             | number\n             | string\n             | bool_valueif : IF LPAREN logical_expression RPAREN statement\n          | IF LPAREN logical_expression RPAREN statement ELSE statementassignment : lvalue ASSIGN rvaluervalue : logical_expression\n              | array_value\n              | lvalue ASSIGN rvaluesimple_rvalue : logical_expression\n                     | lvalue ASSIGN simple_rvaluestring : STRINGcall : ident LPAREN args_list RPARENfunction_definition : type ident LPAREN arguments_declaration_list RPAREN blockarguments_declaration_list :\n                                  | argument_declaration\n                                  | arguments_declaration_list COMMA argument_declarationargument_declaration : type identargs_list :\n                 | logical_expression\n                 | args_list COMMA logical_expressionvars_declaration : type init_declarator_list\n                        | type_array init_array_declarator_listident : IDENTtype_array : IDENT BRACKETStype : IDENTinit_declarator_list : init_declarator\n                            | init_declarator_list COMMA init_declaratorinit_array_declarator_list : init_array_declarator\n                                  | init_array_declarator_list COMMA init_array_declaratorinit_declarator : ident\n                       | ident_initializerinit_array_declarator : array_ident\n                             | array_initializerident_initializer : ident ASSIGN simple_rvaluearray_initializer : ident ASSIGN array_valuearray_value : NEW type LBRACKET logical_expression RBRACKET\n                   | NEW type BRACKETS LBRACE args_list RBRACE\n                   | NEW type LBRACKET logical_expression RBRACKET LBRACE args_list RBRACEarray_ident : identlvalue : ident\n              | get_elementget_element : ident LBRACKET logical_expression RBRACKETfor : FOR LPAREN expression_list SEMICOLON for_condition SEMICOLON expression_list RPAREN statementfor_condition :\n                     | logical_expressiondowhile : DO statement WHILE LPAREN logical_expression RPAREN semicolonswhile : WHILE LPAREN logical_expression RPAREN statementbool_value : TRUE\n                  | FALSEnumber : NUMBERsemicolons : SEMICOLON\n                  | semicolons SEMICOLON'
    
_lr_action_items = {'SEMICOLON':([0,1,2,3,4,5,6,10,11,12,13,14,15,16,17,18,19,20,21,22,29,30,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,70,71,85,86,87,88,89,91,92,94,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,145,146,147,148,149,151,153,155,157,160,163,165,166,169,170,171,172,174,175,177,180,181,182,183,184,185,187,188,190,191,193,194,195,],[6,6,-2,11,6,-6,-115,-3,-116,11,-85,-94,-90,-87,-95,-86,-92,-96,-97,-103,-91,-94,-104,-98,-73,-62,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-93,-99,-59,-60,-57,-62,-104,-56,-55,-62,-104,-77,-7,-74,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,6,-106,-76,-16,-8,-9,-10,-11,-12,-13,11,6,-17,-25,-26,-27,-18,-19,-20,-28,-29,-30,6,-21,-23,-24,-62,-87,-100,11,-31,-22,-101,175,-32,-62,-69,-70,-71,6,-108,6,-102,-67,189,-109,-33,-111,-72,6,6,-68,11,6,-107,]),'IDENT':([0,1,2,3,5,6,7,8,9,10,11,12,16,23,24,25,26,27,31,34,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,94,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,150,151,155,156,157,158,160,161,162,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[9,9,-2,-4,-6,-115,16,16,-89,-3,-116,-5,-87,-88,16,34,16,16,16,-89,-34,-105,-35,-37,-39,-42,-47,16,16,-50,-54,16,-58,-61,16,-64,-65,-66,-114,-75,-112,-113,34,34,16,16,16,-59,-60,16,16,16,16,16,16,16,16,16,16,16,16,16,-57,-62,-104,-56,-55,-62,-104,-77,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,16,151,-106,-76,16,16,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,151,16,-23,-24,16,-89,-15,16,151,16,-22,16,16,151,16,151,151,16,16,-67,-111,151,151,-68,-110,151,-107,]),'$end':([0,1,2,3,5,6,10,11,12,94,123,],[-1,0,-2,-4,-6,-115,-3,-116,-5,-77,-16,]),'RBRACE':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,146,147,148,152,154,155,160,162,173,181,185,191,193,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-83,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,123,-106,-76,-82,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,-21,-23,-24,-84,163,-15,-22,-82,180,-67,-111,-68,-110,-107,]),'LBRACE':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,65,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,153,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,95,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,122,95,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,95,-21,-23,-24,162,-15,-22,95,95,-67,-111,95,-68,-110,95,-107,]),'IF':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,142,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,142,-21,-23,-24,-15,-22,142,142,-67,-111,142,-68,-110,142,-107,]),'FOR':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,143,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,143,-21,-23,-24,-15,-22,143,143,-67,-111,143,-68,-110,143,-107,]),'WHILE':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,159,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,144,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,144,-21,-23,-24,-15,168,-22,144,144,-67,-111,144,-68,-110,144,-107,]),'DO':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,145,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,145,-21,-23,-24,-15,-22,145,145,-67,-111,145,-68,-110,145,-107,]),'RETURN':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,146,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,146,-21,-23,-24,-15,-22,146,146,-67,-111,146,-68,-110,146,-107,]),'CONTINUE':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,147,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,147,-21,-23,-24,-15,-22,147,147,-67,-111,147,-68,-110,147,-107,]),'BREAK':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,160,174,177,181,185,188,191,193,194,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,148,-106,-76,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,148,-21,-23,-24,-15,-22,148,148,-67,-111,148,-68,-110,148,-107,]),'NOT':([6,11,16,26,39,40,41,42,43,44,45,48,49,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,156,157,158,160,161,162,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,50,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,50,-64,-65,-66,-114,-75,-112,-113,50,50,50,-59,-60,50,50,50,50,50,50,50,50,50,50,50,50,50,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,50,50,-106,-76,50,50,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,50,50,-23,-24,-15,50,50,50,-22,50,50,50,50,50,50,50,50,-67,-111,50,50,-68,-110,50,-107,]),'SUB':([6,11,16,26,35,38,39,40,41,42,43,44,45,48,49,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,149,151,155,156,157,158,160,161,162,169,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,47,-104,-62,-34,-105,-35,-37,-39,81,-47,-50,-54,-58,-61,47,-64,-65,-66,-114,-75,-112,-113,47,47,47,-59,-60,47,47,47,47,47,47,47,47,47,47,47,47,47,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,81,81,81,81,-48,-49,-51,-52,-53,-63,47,47,-106,-76,47,47,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,47,47,-23,-24,-62,-87,-15,47,47,47,-22,47,47,-62,47,47,47,47,47,47,-67,-111,47,47,-68,-110,47,-107,]),'ADD':([6,11,16,26,35,38,39,40,41,42,43,44,45,48,49,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,149,151,155,156,157,158,160,161,162,169,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,46,-104,-62,-34,-105,-35,-37,-39,80,-47,-50,-54,-58,-61,46,-64,-65,-66,-114,-75,-112,-113,46,46,46,-59,-60,46,46,46,46,46,46,46,46,46,46,46,46,46,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,80,80,80,80,-48,-49,-51,-52,-53,-63,46,46,-106,-76,46,46,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,46,46,-23,-24,-62,-87,-15,46,46,46,-22,46,46,-62,46,46,46,46,46,46,-67,-111,46,46,-68,-110,46,-107,]),'LPAREN':([6,11,14,16,26,35,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,142,143,144,145,146,147,148,151,155,156,157,158,160,161,162,168,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,25,-87,53,68,-34,-105,-35,-37,-39,-42,-47,53,53,-50,-54,53,-58,-61,53,-64,-65,-66,-114,-75,-112,-113,53,53,53,-59,-60,53,53,53,53,53,53,53,53,53,53,53,53,53,-57,-62,68,-56,-55,-62,68,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,53,53,-106,-76,53,53,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,156,157,158,53,53,-23,-24,-87,-15,53,53,53,-22,53,53,178,53,53,53,53,53,53,-67,-111,53,53,-68,-110,53,-107,]),'NUMBER':([6,11,16,26,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,156,157,158,160,161,162,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,57,-34,-105,-35,-37,-39,-42,-47,57,57,-50,-54,57,-58,-61,57,-64,-65,-66,-114,-75,-112,-113,57,57,57,-59,-60,57,57,57,57,57,57,57,57,57,57,57,57,57,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,57,57,-106,-76,57,57,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,57,57,-23,-24,-15,57,57,57,-22,57,57,57,57,57,57,57,57,-67,-111,57,57,-68,-110,57,-107,]),'STRING':([6,11,16,26,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,156,157,158,160,161,162,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,58,-34,-105,-35,-37,-39,-42,-47,58,58,-50,-54,58,-58,-61,58,-64,-65,-66,-114,-75,-112,-113,58,58,58,-59,-60,58,58,58,58,58,58,58,58,58,58,58,58,58,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,58,58,-106,-76,58,58,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,58,58,-23,-24,-15,58,58,58,-22,58,58,58,58,58,58,58,58,-67,-111,58,58,-68,-110,58,-107,]),'TRUE':([6,11,16,26,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,156,157,158,160,161,162,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,59,-34,-105,-35,-37,-39,-42,-47,59,59,-50,-54,59,-58,-61,59,-64,-65,-66,-114,-75,-112,-113,59,59,59,-59,-60,59,59,59,59,59,59,59,59,59,59,59,59,59,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,59,59,-106,-76,59,59,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,59,59,-23,-24,-15,59,59,59,-22,59,59,59,59,59,59,59,59,-67,-111,59,59,-68,-110,59,-107,]),'FALSE':([6,11,16,26,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,95,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,122,123,124,125,126,127,128,129,130,132,133,134,135,136,137,138,145,146,147,148,155,156,157,158,160,161,162,174,175,176,177,178,179,181,185,188,189,191,193,194,195,],[-115,-116,-87,60,-34,-105,-35,-37,-39,-42,-47,60,60,-50,-54,60,-58,-61,60,-64,-65,-66,-114,-75,-112,-113,60,60,60,-59,-60,60,60,60,60,60,60,60,60,60,60,60,60,60,-57,-62,-104,-56,-55,-62,-104,-7,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,60,60,-106,-76,60,60,-16,-8,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,60,60,-23,-24,-15,60,60,60,-22,60,60,60,60,60,60,60,60,-67,-111,60,60,-68,-110,60,-107,]),'ELSE':([6,11,16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,123,125,126,127,128,129,130,132,133,134,135,136,137,138,146,147,148,155,160,181,185,191,193,195,],[-115,-116,-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-16,-9,-10,-11,-12,-13,-14,-17,-25,-26,-27,-18,-19,-20,-21,-23,-24,-15,-22,188,-111,-68,-110,-107,]),'BRACKETS':([9,34,93,151,],[23,-89,116,23,]),'COMMA':([13,14,15,16,17,18,19,20,21,22,25,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,64,68,70,71,85,86,87,88,89,91,92,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,122,139,140,141,149,151,152,153,154,157,162,163,165,166,169,170,171,172,173,180,184,187,189,192,],[24,-94,-90,-87,-95,27,-92,-96,-97,-103,-78,-91,-94,66,-79,-104,-98,-73,-62,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-93,-99,-81,-82,-59,-60,-57,-62,-104,-56,-55,-62,-104,-80,120,-83,-74,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-82,-28,-29,-30,-62,-87,-84,-100,120,-31,-82,-101,176,-32,-62,-69,-70,-71,120,-102,-33,-72,-31,176,]),'RPAREN':([13,15,16,17,18,19,20,21,22,25,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,61,62,64,68,70,71,85,86,87,88,89,90,91,92,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,139,140,141,149,151,152,153,163,164,166,167,169,170,171,172,180,184,186,187,189,192,],[-85,-90,-87,-95,-86,-92,-96,-97,-103,-78,-91,-94,65,-79,-104,-98,-73,-62,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-93,-99,-81,-82,-59,-60,-57,-62,-104,-56,-55,114,-62,-104,-80,119,-83,-74,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-28,-29,-30,-62,-87,-84,-100,-101,174,-32,177,-62,-69,-70,-71,-102,-33,190,-72,-31,194,]),'ASSIGN':([14,16,22,30,35,38,40,118,149,151,169,],[26,-87,28,26,-104,69,-105,-106,161,-87,179,]),'LBRACKET':([16,34,35,87,92,93,151,],[-87,-89,67,67,67,115,-87,]),'INC_OP':([16,35,38,40,91,92,118,149,151,169,],[-87,-104,70,-105,70,-104,-106,70,-87,70,]),'DEC_OP':([16,35,38,40,91,92,118,149,151,169,],[-87,-104,71,-105,71,-104,-106,71,-87,71,]),'MUL':([16,35,38,40,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,82,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,82,82,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'DIV':([16,35,38,40,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,83,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,83,83,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'MOD':([16,35,38,40,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,84,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,84,84,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'GT':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,76,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,76,76,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'LT':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,77,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,77,77,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'GE':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,78,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,78,78,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'LE':([16,35,38,40,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,79,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,79,79,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'EQUALS':([16,35,38,40,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,74,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,74,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'NOTEQUALS':([16,35,38,40,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,75,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,75,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'AND':([16,35,38,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,-105,73,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,73,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'OR':([16,35,38,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,149,151,169,],[-87,-104,-62,72,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,-62,-87,-62,]),'RBRACKET':([16,39,40,41,42,43,44,45,48,49,51,52,54,55,56,57,58,59,60,70,71,85,86,87,88,89,91,92,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,118,119,121,],[-87,-34,-105,-35,-37,-39,-42,-47,-50,-54,-58,-61,-64,-65,-66,-114,-75,-112,-113,-59,-60,-57,-62,-104,-56,-55,-62,-104,118,-36,-38,-40,-41,-43,-44,-45,-46,-48,-49,-51,-52,-53,-63,-106,-76,153,]),'NEW':([28,161,179,],[63,63,63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'translation_unit':([0,],[1,]),'external_declaration':([0,1,],[2,10,]),'semicolons':([0,1,4,117,131,145,174,177,188,190,194,],[3,3,12,130,155,130,130,130,130,193,130,]),'vars_declaration':([0,1,117,145,157,174,176,177,188,189,194,],[4,4,141,141,141,141,141,141,141,141,141,]),'function_definition':([0,1,],[5,5,]),'type':([0,1,25,63,66,117,145,157,174,176,177,188,189,194,],[7,7,31,93,31,150,150,150,150,150,150,150,150,150,]),'type_array':([0,1,117,145,157,174,176,177,188,189,194,],[8,8,8,8,8,8,8,8,8,8,8,]),'init_declarator_list':([7,150,],[13,13,]),'ident':([7,8,24,26,27,31,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,150,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[14,22,30,35,22,64,87,87,87,92,92,92,35,92,92,92,92,92,92,92,92,92,92,92,92,92,92,35,92,92,35,92,30,92,35,92,35,92,35,92,35,35,92,35,35,35,35,]),'init_declarator':([7,24,150,],[15,29,15,]),'ident_initializer':([7,24,150,],[17,17,17,]),'init_array_declarator_list':([8,],[18,]),'init_array_declarator':([8,27,],[19,61,]),'array_ident':([8,27,],[20,20,]),'array_initializer':([8,27,],[21,21,]),'arguments_declaration_list':([25,],[32,]),'argument_declaration':([25,66,],[33,96,]),'simple_rvalue':([26,69,],[36,100,]),'logical_expression':([26,53,67,68,69,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[37,90,97,99,37,121,139,152,99,139,160,164,139,167,171,99,139,183,139,139,186,171,139,139,139,]),'lvalue':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[38,86,86,86,91,91,91,38,91,91,91,91,91,91,91,91,91,91,91,91,91,91,149,91,91,149,91,91,149,91,169,91,149,91,149,149,91,169,149,149,149,]),'logical_or_expression':([26,53,67,68,69,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'get_element':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'logical_and_expression':([26,53,67,68,69,72,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[41,41,41,41,41,101,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'equality_expression':([26,53,67,68,69,72,73,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[42,42,42,42,42,42,102,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'relational_expression':([26,53,67,68,69,72,73,74,75,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[43,43,43,43,43,43,43,103,104,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'additive_expression':([26,53,67,68,69,72,73,74,75,76,77,78,79,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[44,44,44,44,44,44,44,44,44,105,106,107,108,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'multiplicative_expression':([26,53,67,68,69,72,73,74,75,76,77,78,79,80,81,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[45,45,45,45,45,45,45,45,45,45,45,45,45,109,110,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'unary_expression':([26,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,111,112,113,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'postfix_expression':([26,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'group':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[51,85,88,89,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'call':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'number':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'string':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'bool_value':([26,46,47,50,53,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,84,115,117,120,122,145,146,156,157,158,161,162,174,175,176,177,178,179,188,189,194,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'array_value':([28,161,179,],[62,172,172,]),'block':([65,117,145,174,177,188,194,],[94,126,126,126,126,126,126,]),'args_list':([68,122,162,],[98,154,173,]),'statement_list':([95,],[117,]),'statement':([117,145,174,177,188,194,],[124,159,181,185,191,195,]),'simple_statement':([117,145,174,177,188,194,],[125,125,125,125,125,125,]),'selection_statement':([117,145,174,177,188,194,],[127,127,127,127,127,127,]),'iteration_statement':([117,145,174,177,188,194,],[128,128,128,128,128,128,]),'jump_statement':([117,145,174,177,188,194,],[129,129,129,129,129,129,]),'expression':([117,145,157,174,176,177,188,189,194,],[131,131,166,131,184,131,131,166,131,]),'if':([117,145,174,177,188,194,],[132,132,132,132,132,132,]),'for':([117,145,174,177,188,194,],[133,133,133,133,133,133,]),'while':([117,145,174,177,188,194,],[134,134,134,134,134,134,]),'dowhile':([117,145,174,177,188,194,],[135,135,135,135,135,135,]),'return':([117,145,174,177,188,194,],[136,136,136,136,136,136,]),'continue':([117,145,174,177,188,194,],[137,137,137,137,137,137,]),'break':([117,145,174,177,188,194,],[138,138,138,138,138,138,]),'assignment':([117,145,157,174,176,177,188,189,194,],[140,140,140,140,140,140,140,140,140,]),'expression_list':([157,189,],[165,192,]),'rvalue':([161,179,],[170,187,]),'for_condition':([175,],[182,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> translation_unit","S'",1,None,None,None),
  ('translation_unit -> <empty>','translation_unit',0,'p_translation_unit','cTreeParser.py',96),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cTreeParser.py',97),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cTreeParser.py',98),
  ('external_declaration -> semicolons','external_declaration',1,'p_external_declaration','cTreeParser.py',110),
  ('external_declaration -> vars_declaration semicolons','external_declaration',2,'p_external_declaration','cTreeParser.py',111),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cTreeParser.py',112),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','cTreeParser.py',117),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cTreeParser.py',118),
  ('statement -> simple_statement','statement',1,'p_statement','cTreeParser.py',128),
  ('statement -> block','statement',1,'p_statement','cTreeParser.py',129),
  ('statement -> selection_statement','statement',1,'p_statement','cTreeParser.py',130),
  ('statement -> iteration_statement','statement',1,'p_statement','cTreeParser.py',131),
  ('statement -> jump_statement','statement',1,'p_statement','cTreeParser.py',132),
  ('simple_statement -> semicolons','simple_statement',1,'p_simple_statement','cTreeParser.py',137),
  ('simple_statement -> expression semicolons','simple_statement',2,'p_simple_statement','cTreeParser.py',138),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','cTreeParser.py',143),
  ('selection_statement -> if','selection_statement',1,'p_selection_statement','cTreeParser.py',148),
  ('jump_statement -> return','jump_statement',1,'p_jump_statement','cTreeParser.py',153),
  ('jump_statement -> continue','jump_statement',1,'p_jump_statement','cTreeParser.py',154),
  ('jump_statement -> break','jump_statement',1,'p_jump_statement','cTreeParser.py',155),
  ('return -> RETURN','return',1,'p_return','cTreeParser.py',160),
  ('return -> RETURN logical_expression','return',2,'p_return','cTreeParser.py',161),
  ('continue -> CONTINUE','continue',1,'p_continue','cTreeParser.py',169),
  ('break -> BREAK','break',1,'p_break','cTreeParser.py',174),
  ('iteration_statement -> for','iteration_statement',1,'p_iteration_statement','cTreeParser.py',179),
  ('iteration_statement -> while','iteration_statement',1,'p_iteration_statement','cTreeParser.py',180),
  ('iteration_statement -> dowhile','iteration_statement',1,'p_iteration_statement','cTreeParser.py',181),
  ('expression -> logical_expression','expression',1,'p_expression','cTreeParser.py',186),
  ('expression -> assignment','expression',1,'p_expression','cTreeParser.py',187),
  ('expression -> vars_declaration','expression',1,'p_expression','cTreeParser.py',188),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list','cTreeParser.py',193),
  ('expression_list -> expression','expression_list',1,'p_expression_list','cTreeParser.py',194),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','cTreeParser.py',195),
  ('logical_expression -> logical_or_expression','logical_expression',1,'p_logical_expression','cTreeParser.py',206),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cTreeParser.py',211),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cTreeParser.py',212),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression','cTreeParser.py',220),
  ('logical_and_expression -> logical_and_expression AND equality_expression','logical_and_expression',3,'p_logical_and_expression','cTreeParser.py',221),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cTreeParser.py',229),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cTreeParser.py',230),
  ('equality_expression -> equality_expression NOTEQUALS relational_expression','equality_expression',3,'p_equality_expression','cTreeParser.py',231),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','cTreeParser.py',239),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',240),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',241),
  ('relational_expression -> relational_expression GE additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',242),
  ('relational_expression -> relational_expression LE additive_expression','relational_expression',3,'p_relational_expression','cTreeParser.py',243),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cTreeParser.py',251),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cTreeParser.py',252),
  ('additive_expression -> additive_expression SUB multiplicative_expression','additive_expression',3,'p_additive_expression','cTreeParser.py',253),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','cTreeParser.py',261),
  ('multiplicative_expression -> multiplicative_expression MUL unary_expression','multiplicative_expression',3,'p_multiplicative_expression','cTreeParser.py',262),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','cTreeParser.py',263),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','cTreeParser.py',264),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cTreeParser.py',272),
  ('unary_expression -> NOT group','unary_expression',2,'p_unary_expression','cTreeParser.py',273),
  ('unary_expression -> SUB group','unary_expression',2,'p_unary_expression','cTreeParser.py',274),
  ('unary_expression -> ADD group','unary_expression',2,'p_unary_expression','cTreeParser.py',275),
  ('postfix_expression -> group','postfix_expression',1,'p_postfix_expression','cTreeParser.py',283),
  ('postfix_expression -> lvalue INC_OP','postfix_expression',2,'p_postfix_expression','cTreeParser.py',284),
  ('postfix_expression -> lvalue DEC_OP','postfix_expression',2,'p_postfix_expression','cTreeParser.py',285),
  ('group -> call','group',1,'p_group','cTreeParser.py',292),
  ('group -> lvalue','group',1,'p_group','cTreeParser.py',293),
  ('group -> LPAREN logical_expression RPAREN','group',3,'p_group','cTreeParser.py',294),
  ('group -> number','group',1,'p_group','cTreeParser.py',295),
  ('group -> string','group',1,'p_group','cTreeParser.py',296),
  ('group -> bool_value','group',1,'p_group','cTreeParser.py',297),
  ('if -> IF LPAREN logical_expression RPAREN statement','if',5,'p_if','cTreeParser.py',305),
  ('if -> IF LPAREN logical_expression RPAREN statement ELSE statement','if',7,'p_if','cTreeParser.py',306),
  ('assignment -> lvalue ASSIGN rvalue','assignment',3,'p_assignment','cTreeParser.py',315),
  ('rvalue -> logical_expression','rvalue',1,'p_rvalue','cTreeParser.py',320),
  ('rvalue -> array_value','rvalue',1,'p_rvalue','cTreeParser.py',321),
  ('rvalue -> lvalue ASSIGN rvalue','rvalue',3,'p_rvalue','cTreeParser.py',322),
  ('simple_rvalue -> logical_expression','simple_rvalue',1,'p_simple_rvalue','cTreeParser.py',330),
  ('simple_rvalue -> lvalue ASSIGN simple_rvalue','simple_rvalue',3,'p_simple_rvalue','cTreeParser.py',331),
  ('string -> STRING','string',1,'p_string','cTreeParser.py',339),
  ('call -> ident LPAREN args_list RPAREN','call',4,'p_call','cTreeParser.py',344),
  ('function_definition -> type ident LPAREN arguments_declaration_list RPAREN block','function_definition',6,'p_function_definition','cTreeParser.py',349),
  ('arguments_declaration_list -> <empty>','arguments_declaration_list',0,'p_arguments_declaration_list','cTreeParser.py',354),
  ('arguments_declaration_list -> argument_declaration','arguments_declaration_list',1,'p_arguments_declaration_list','cTreeParser.py',355),
  ('arguments_declaration_list -> arguments_declaration_list COMMA argument_declaration','arguments_declaration_list',3,'p_arguments_declaration_list','cTreeParser.py',356),
  ('argument_declaration -> type ident','argument_declaration',2,'p_argument_declaration','cTreeParser.py',367),
  ('args_list -> <empty>','args_list',0,'p_args_list','cTreeParser.py',372),
  ('args_list -> logical_expression','args_list',1,'p_args_list','cTreeParser.py',373),
  ('args_list -> args_list COMMA logical_expression','args_list',3,'p_args_list','cTreeParser.py',374),
  ('vars_declaration -> type init_declarator_list','vars_declaration',2,'p_vars_declaration','cTreeParser.py',384),
  ('vars_declaration -> type_array init_array_declarator_list','vars_declaration',2,'p_vars_declaration','cTreeParser.py',385),
  ('ident -> IDENT','ident',1,'p_ident','cTreeParser.py',393),
  ('type_array -> IDENT BRACKETS','type_array',2,'p_type_array','cTreeParser.py',398),
  ('type -> IDENT','type',1,'p_type','cTreeParser.py',404),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cTreeParser.py',410),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cTreeParser.py',411),
  ('init_array_declarator_list -> init_array_declarator','init_array_declarator_list',1,'p_init_array_declarator_list','cTreeParser.py',420),
  ('init_array_declarator_list -> init_array_declarator_list COMMA init_array_declarator','init_array_declarator_list',3,'p_init_array_declarator_list','cTreeParser.py',421),
  ('init_declarator -> ident','init_declarator',1,'p_init_declarator','cTreeParser.py',430),
  ('init_declarator -> ident_initializer','init_declarator',1,'p_init_declarator','cTreeParser.py',431),
  ('init_array_declarator -> array_ident','init_array_declarator',1,'p_init_array_declarator','cTreeParser.py',436),
  ('init_array_declarator -> array_initializer','init_array_declarator',1,'p_init_array_declarator','cTreeParser.py',437),
  ('ident_initializer -> ident ASSIGN simple_rvalue','ident_initializer',3,'p_ident_initializer','cTreeParser.py',442),
  ('array_initializer -> ident ASSIGN array_value','array_initializer',3,'p_array_initializer','cTreeParser.py',447),
  ('array_value -> NEW type LBRACKET logical_expression RBRACKET','array_value',5,'p_array_value','cTreeParser.py',452),
  ('array_value -> NEW type BRACKETS LBRACE args_list RBRACE','array_value',6,'p_array_value','cTreeParser.py',453),
  ('array_value -> NEW type LBRACKET logical_expression RBRACKET LBRACE args_list RBRACE','array_value',8,'p_array_value','cTreeParser.py',454),
  ('array_ident -> ident','array_ident',1,'p_array_ident','cTreeParser.py',464),
  ('lvalue -> ident','lvalue',1,'p_lvalue','cTreeParser.py',469),
  ('lvalue -> get_element','lvalue',1,'p_lvalue','cTreeParser.py',470),
  ('get_element -> ident LBRACKET logical_expression RBRACKET','get_element',4,'p_get_element','cTreeParser.py',475),
  ('for -> FOR LPAREN expression_list SEMICOLON for_condition SEMICOLON expression_list RPAREN statement','for',9,'p_for','cTreeParser.py',480),
  ('for_condition -> <empty>','for_condition',0,'p_for_condition','cTreeParser.py',485),
  ('for_condition -> logical_expression','for_condition',1,'p_for_condition','cTreeParser.py',486),
  ('dowhile -> DO statement WHILE LPAREN logical_expression RPAREN semicolons','dowhile',7,'p_dowhile','cTreeParser.py',492),
  ('while -> WHILE LPAREN logical_expression RPAREN statement','while',5,'p_while','cTreeParser.py',497),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','cTreeParser.py',504),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','cTreeParser.py',505),
  ('number -> NUMBER','number',1,'p_expression_number','cTreeParser.py',510),
  ('semicolons -> SEMICOLON','semicolons',1,'p_semicolons','cTreeParser.py',515),
  ('semicolons -> semicolons SEMICOLON','semicolons',2,'p_semicolons','cTreeParser.py',516),
]
